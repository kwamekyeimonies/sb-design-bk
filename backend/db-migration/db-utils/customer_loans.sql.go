// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: customer_loans.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCustomerLoan = `-- name: CreateCustomerLoan :one
INSERT INTO customer_loans(
    id,
    customer_id,
    loan_amount,
    paid_amount,
    remaining_amount,
    user_id,
    created_at,
    updated_at,
    is_deleted,
    deleted_at
)VALUES(
    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10
)RETURNING id, customer_id, loan_amount, paid_amount, remaining_amount, user_id, created_at, updated_at, is_deleted, deleted_at
`

type CreateCustomerLoanParams struct {
	ID              uuid.UUID `json:"id"`
	CustomerID      uuid.UUID `json:"customer_id"`
	LoanAmount      string    `json:"loan_amount"`
	PaidAmount      string    `json:"paid_amount"`
	RemainingAmount string    `json:"remaining_amount"`
	UserID          uuid.UUID `json:"user_id"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
	IsDeleted       bool      `json:"is_deleted"`
	DeletedAt       time.Time `json:"deleted_at"`
}

func (q *Queries) CreateCustomerLoan(ctx context.Context, arg CreateCustomerLoanParams) (CustomerLoan, error) {
	row := q.db.QueryRow(ctx, createCustomerLoan,
		arg.ID,
		arg.CustomerID,
		arg.LoanAmount,
		arg.PaidAmount,
		arg.RemainingAmount,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsDeleted,
		arg.DeletedAt,
	)
	var i CustomerLoan
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.LoanAmount,
		&i.PaidAmount,
		&i.RemainingAmount,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}

const updateLoanTransaction = `-- name: UpdateLoanTransaction :exec
UPDATE customer_loans SET
    paid_amount = $1,
    loan_amount = $2,
    remaining_amount = $3,
    user_id = $4,
    updated_at = NOW()
WHERE customer_id = $5
`

type UpdateLoanTransactionParams struct {
	PaidAmount      string    `json:"paid_amount"`
	LoanAmount      string    `json:"loan_amount"`
	RemainingAmount string    `json:"remaining_amount"`
	UserID          uuid.UUID `json:"user_id"`
	CustomerID      uuid.UUID `json:"customer_id"`
}

func (q *Queries) UpdateLoanTransaction(ctx context.Context, arg UpdateLoanTransactionParams) error {
	_, err := q.db.Exec(ctx, updateLoanTransaction,
		arg.PaidAmount,
		arg.LoanAmount,
		arg.RemainingAmount,
		arg.UserID,
		arg.CustomerID,
	)
	return err
}
