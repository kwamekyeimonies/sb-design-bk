// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: customer.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer
(   id,
    full_name,
    email,
    role,
    password,
    organization,
    created_at,
    updated_at,
    is_deleted,
    deleted_at,
    phone_number,
    profile_pic,
    user_status,
    is_verified,
    api_key
)VALUES(
    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15
)RETURNING id, full_name, email, role, password, organization, created_at, updated_at, is_deleted, deleted_at, phone_number, profile_pic, user_status, is_verified, api_key
`

type CreateCustomerParams struct {
	ID           uuid.UUID `json:"id"`
	FullName     string    `json:"full_name"`
	Email        string    `json:"email"`
	Role         string    `json:"role"`
	Password     string    `json:"password"`
	Organization string    `json:"organization"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	IsDeleted    bool      `json:"is_deleted"`
	DeletedAt    time.Time `json:"deleted_at"`
	PhoneNumber  string    `json:"phone_number"`
	ProfilePic   string    `json:"profile_pic"`
	UserStatus   bool      `json:"user_status"`
	IsVerified   bool      `json:"is_verified"`
	ApiKey       string    `json:"api_key"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.ID,
		arg.FullName,
		arg.Email,
		arg.Role,
		arg.Password,
		arg.Organization,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsDeleted,
		arg.DeletedAt,
		arg.PhoneNumber,
		arg.ProfilePic,
		arg.UserStatus,
		arg.IsVerified,
		arg.ApiKey,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.Password,
		&i.Organization,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.PhoneNumber,
		&i.ProfilePic,
		&i.UserStatus,
		&i.IsVerified,
		&i.ApiKey,
	)
	return i, err
}
